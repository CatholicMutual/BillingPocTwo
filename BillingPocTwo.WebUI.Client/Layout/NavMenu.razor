@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="@GetHomePageUrl()">CMG Billing POC</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        @if (isAuthenticated)
        {
            <h5 class="px-3" style="color: #cccccc;">Billing Tools:</h5>
            <div class="nav-item px-3">
                <button class="btn btn-link nav-link" @onclick="ToggleBillingMenu">
                    <span class="bi bi-file-earmark-text" aria-hidden="true"></span> Billing
                </button>
                <div class="@BillingMenuCssClass">
                    <NavLink class="nav-link" href="entity-register">
                        <span class="bi bi-list" aria-hidden="true"></span> Entity Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="search">
                        <span class="bi bi-search" aria-hidden="true"></span> Search
                    </NavLink>
                </div>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool collapseAccountMenu = true;
    private bool collapseBillingMenu = true;
    private bool isAuthenticated;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? BillingMenuCssClass => collapseBillingMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateAuthenticationState();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateAuthenticationState();
        StateHasChanged();
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private string GetHomePageUrl()
    {
        return isAuthenticated ? "/welcome2" : "/";
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleAccountMenu()
    {
        collapseAccountMenu = !collapseAccountMenu;
    }

    private void ToggleBillingMenu()
    {
        collapseBillingMenu = !collapseBillingMenu;
    }

    // private async Task Logout()
    // {
    //     // SessionStorage.ClearAsync(); // optional
    //     // LocalStorage.ClearAsync();   // optional
    //     // Navigation.NavigateTo("authentication/logout", true);
    // }
}