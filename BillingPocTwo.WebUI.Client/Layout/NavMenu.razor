@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="@GetHomePageUrl()">CMG Billing POC</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        @if (isAuthenticated && userRoles.Any())
        {
            <h5 class="px-3" style="color: #cccccc;">Billing Tools:</h5>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="accounts-register">
                    <span class="bi bi-list" aria-hidden="true"></span> Accounts Register
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="search">
                    <span class="bi bi-search" aria-hidden="true"></span> Client Search
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="user-profile">
                    <span class="bi bi-person" aria-hidden="true"></span> User Profile
                </NavLink>
            </div>
        }
        else if (isAuthenticated)
        {
            <div class="px-3">
                <p style="color: #cccccc;">You do not have the required roles to access the menu.</p>
            </div>
        }
        else
        {
            <div class="px-3">
                <p style="color: #cccccc;">Please log in to access the menu.</p>
            </div>
        }
    </nav>
</div>

@code {
    @code {
        private bool collapseNavMenu = true;
        private bool isAuthenticated;
        private List<string> userRoles = new();

        private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

        protected override async Task OnInitializedAsync()
        {
            AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
            await UpdateAuthenticationState();
        }

        private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
        {
            await UpdateAuthenticationState();
            StateHasChanged();
        }

        private async Task UpdateAuthenticationState()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                // Extract roles from the claims
                userRoles = user.Claims
                    .Where(c => c.Type == "roles" || c.Type == "appRoles" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                    .SelectMany(c => ParseRolesFromClaim(c.Value))
                    .ToList();
            }
            else
            {
                userRoles.Clear();
            }
        }

        private IEnumerable<string> ParseRolesFromClaim(string claimValue)
        {
            try
            {
                // Attempt to parse the claim value as a JSON array
                return System.Text.Json.JsonSerializer.Deserialize<List<string>>(claimValue) ?? new List<string>();
            }
            catch
            {
                // If parsing fails, treat the claim value as a single role
                return new List<string> { claimValue };
            }
        }

        private string GetHomePageUrl()
        {
            return isAuthenticated ? "/welcome2" : "/";
        }

        private void ToggleNavMenu()
        {
            collapseNavMenu = !collapseNavMenu;
        }
    }
}