@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserState UserState

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BillingPocTwo.WebUI.Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
        @if (UserState.IsAdmin)
        {
            <h5 class="px-3" style="color: #cccccc;">Admin Tools:</h5>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="change-role">
                    <span class="bi bi-person-badge-fill-nav-menu" aria-hidden="true"></span> Change Role
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="delete-user">
                    <span class="bi bi-person-x-fill-nav-menu" aria-hidden="true"></span> Delete User
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateUserState();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserState();
        StateHasChanged();
    }

    private async Task UpdateUserState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserState.IsAdmin = user.IsInRole("Admin");
        }
        else
        {
            UserState.IsAdmin = false;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
