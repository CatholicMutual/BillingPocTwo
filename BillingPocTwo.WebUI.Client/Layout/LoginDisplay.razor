@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isAuthenticated)
{
    <span>@userFullName&nbsp;&nbsp;</span>
    <button @onclick="BeginLogout">Logout</button>
}
else
{
    <button @onclick="NavigateToLogin">Login</button>
}

@code {
    private bool isAuthenticated;
    private string? userFullName;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateAuthenticationState();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateAuthenticationState();
        StateHasChanged();
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            // Retrieve the user's full name from the claims
            userFullName = user.FindFirst("name")?.Value ?? "User";
        }
        else
        {
            userFullName = null;
        }
    }

    private async Task BeginLogout()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout", true);
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("authentication/login");
    }
}
