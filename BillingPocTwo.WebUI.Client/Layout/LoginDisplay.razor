@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isAuthenticated)
{
    <button @onclick="BeginLogout">Logout</button>
}
else
{
    <a href="authentication/login">Login</a>
}

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateAuthenticationState();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async Task BeginLogout()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout", true);
    }
}
