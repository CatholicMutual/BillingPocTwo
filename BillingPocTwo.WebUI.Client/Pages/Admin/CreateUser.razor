@page "/create-user"

@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage

<h3>Create User</h3>

<EditForm Model="createUserModel" OnValidSubmit="HandleCreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>First Name:</label>
        <InputText @bind-Value="createUserModel.FirstName" />
    </div>
    <div>
        <label>Last Name:</label>
        <InputText @bind-Value="createUserModel.LastName" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="createUserModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="createUserModel.Password" type="password" />
    </div>
    <div>
        <label>Role:</label>
        @foreach (var role in availableRoles)
        {
            <div>
                <InputCheckbox @bind-Value="role.IsSelected" />
                <label>@role.Name</label>
            </div>
        }
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Create User</span>
        }
    </button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(message))
{
    <em>@message</em>
}

@code {
    public CreateUserDto createUserModel = new CreateUserDto();
    public List<RoleSelection> availableRoles = new List<RoleSelection>();
    public string message = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync() => await LoadRoles();

    private async Task LoadRoles()
    {
        var client = HttpClientFactory.CreateClient("AuthApi");

        var token = await SessionStorage.GetItemAsync<string>("AccessToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, "api/auth/user-roles");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var roles = await response.Content.ReadFromJsonAsync<List<UserRole>>();
            if (roles != null)
            {
                availableRoles = roles.Select(r => new RoleSelection { Name = r.RoleName }).ToList();
            }
        }
        else
        {
            message = "Failed to load roles";
        }
    }

    public async Task HandleCreateUser()
    {
        isLoading = true;

        var client = HttpClientFactory.CreateClient("AuthApi");

        var token = await SessionStorage.GetItemAsync<string>("AccessToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            isLoading = false;
            return;
        }

        createUserModel.Roles = availableRoles.Where(r => r.IsSelected).Select(r => r.Name).ToList();

        var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/create-user")
        {
            Content = JsonContent.Create(createUserModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "User created successfully";
            Thread.Sleep(2000);
            Navigation.NavigateTo("/welcome2");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            message = $"Failed to create user: {responseContent}";
        }
        StateHasChanged();
        isLoading = false;
    }

    public class RoleSelection
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }
}
