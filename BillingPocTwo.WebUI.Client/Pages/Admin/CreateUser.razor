@page "/create-user"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>Create User</h3>

<EditForm Model="createUserModel" OnValidSubmit="HandleCreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="createUserModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="createUserModel.Password" type="password" />
    </div>
    <div>
        <label>Role:</label>
        <InputText @bind-Value="createUserModel.Role" />
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Create User</span>
        }
    </button>
</EditForm>

<p><em>@message</em></p>

@code {
    private CreateUserDto createUserModel = new CreateUserDto();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleCreateUser()
    {
        isLoading = true;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            isLoading = false;
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/create-user")
        {
            Content = JsonContent.Create(createUserModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "User created successfully";
            Thread.Sleep(2000);
            Navigation.NavigateTo("/welcome2");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            message = $"Failed to create user: {responseContent}";
        }
        isLoading = false;
    }
}
