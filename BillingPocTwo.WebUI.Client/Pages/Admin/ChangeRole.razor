@page "/change-role"

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@attribute [Authorize(Roles = "Admin")]

<h3>Modify User Account</h3>

<EditForm Model="changeDetailsModel" OnValidSubmit="HandleChangeRole">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>User Email:</label>
        <InputText @bind-Value="userEmail" />
        <button type="button" @onclick="SearchUser">Search for User</button>
    </div>
    @if (isSearchDone)
    {
        <div>
            <label>First Name:</label>
            <InputText @bind-Value="changeDetailsModel.FirstName" />
        </div>
        <div>
            <label>Last Name:</label>
            <InputText @bind-Value="changeDetailsModel.LastName" />
        </div>
        <div>
            <label>Active:</label>
            <InputCheckbox @bind-Value="changeDetailsModel.Active" />
        </div>
        <div>
            <label>Service User:</label>
            <InputCheckbox @bind-Value="changeDetailsModel.ServiceUser" />
        </div>
        <div>
            <label>New Roles:</label>
            @foreach (var role in availableRoles)
            {
                <div>
                    <InputCheckbox @bind-Value="role.IsSelected" />
                    <label>@role.Name</label>
                </div>
            }
        </div>
        <button type="submit" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Loading...</span>
            }
            else
            {
                <span>Change Details</span>
            }
        </button>
    }
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <em>@message</em>
}


@code {
    public string userEmail = string.Empty;
    private ChangeRoleDto changeDetailsModel = new ChangeRoleDto();
    private List<RoleSelection> availableRoles = new List<RoleSelection>();
    public string message = string.Empty;
    public bool isLoading = false;
    private bool isSearchDone = false;

    public async Task SearchUser()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            await InvokeAsync(() =>
                {
                    message = "User is not authenticated";
                    isLoading = false;
                    StateHasChanged();
                    return;
                });
        }

        var client = HttpClientFactory.CreateClient("AuthApi");

        // Load all available roles
        var requestRoles = new HttpRequestMessage(HttpMethod.Get, "api/auth/user-roles");
        requestRoles.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var responseRoles = await client.SendAsync(requestRoles);
        if (responseRoles.IsSuccessStatusCode)
        {
            var roles = await responseRoles.Content.ReadFromJsonAsync<List<UserRole>>();
            if (roles == null)
            {
                await InvokeAsync(() =>
                {
                    message = "Failed to load user roles";
                    isLoading = false;
                    StateHasChanged();
                    return;
                });
            }

            // Fetch user details
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/auth/user-roles/{userEmail}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChangeRoleDto>();
                if (result != null)
                {
                    changeDetailsModel = result;
                    availableRoles = roles.Select(r => new RoleSelection
                    {
                        Name = r.Name,
                        IsSelected = result.NewRoles.Contains(r.Name)
                    }).ToList();
                    isSearchDone = true;
                }
            }
            else
            {
                await InvokeAsync(() =>
            {
                message = "Failed to load user details";
                isLoading = false;
                StateHasChanged();
                return;
            });
            }
        }
        else
        {
            await InvokeAsync(() =>
            {
                message = "Failed to load user roles";
                isLoading = false;
                StateHasChanged();
                return;
            });
        }
    }

    public async Task HandleChangeRole()
    {
        isLoading = true;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            await InvokeAsync(() =>
            {
                message = "User is not authenticated";
                isLoading = false;
                StateHasChanged();
                return;
            });
        }

        var client = HttpClientFactory.CreateClient("AuthApi");

        changeDetailsModel.NewRoles = availableRoles.Where(r => r.IsSelected).Select(r => r.Name).ToList();

        var request = new HttpRequestMessage(HttpMethod.Put, "api/auth/change-user-details")
        {
            Content = JsonContent.Create(changeDetailsModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await InvokeAsync(() =>
            {
                message = "Details changed successfully";
                StateHasChanged();
            });

        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            await InvokeAsync(() =>
            {
                message = responseContent;
                StateHasChanged();
            });
        }
        isLoading = false;
    }

    private class RoleSelection
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }
}
