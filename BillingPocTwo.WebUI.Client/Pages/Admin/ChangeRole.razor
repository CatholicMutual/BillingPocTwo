@page "/change-role"
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@attribute [Authorize(Roles = "Admin")]

<h3>Change User Role</h3>

<EditForm Model="changeRoleModel" OnValidSubmit="HandleChangeRole">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>User Email:</label>
        <InputText @bind-Value="changeRoleModel.Email" />
    </div>
    <div>
        <label>New Role:</label>
        <InputRadioGroup @bind-Value="changeRoleModel.NewRole">
            @foreach (var role in userRoles)
            {
                <div>
                    <InputRadio Value="@role.Name" />
                    <label>@role.Name</label>
                </div>
            }
        </InputRadioGroup>
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Change Role</span>
        }
    </button>
</EditForm>

<p><em>@message</em></p>

@code {
    private ChangeRoleDto changeRoleModel = new ChangeRoleDto();
    private List<UserRole> userRoles = new List<UserRole>();
    private string message = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserRoles();
    }

    private async Task LoadUserRoles()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, "api/auth/user-roles");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            userRoles = await response.Content.ReadFromJsonAsync<List<UserRole>>();
        }
        else
        {
            message = "Failed to load user roles";
        }
    }

    private async Task HandleChangeRole()
    {
        isLoading = true;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            isLoading = false;
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Put, $"api/auth/change-user-role/{changeRoleModel.Email}")
        {
            Content = JsonContent.Create(changeRoleModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "Role changed successfully";
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            message = $"Failed to change role: {responseContent}";
        }
        isLoading = false;
    }

    public class ChangeRoleDto
    {
        public string Email { get; set; }
        public string NewRole { get; set; }
    }
}
