@page "/policy-details/{PolicyNo}"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Policy Details</h3>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (Policy != null)
{
    <div class="card mb-2">
        <div class="card-body d-flex flex-wrap align-items-center justify-content-between">
            <div>
                <label class="me-2"><strong>Policy:</strong></label>
                <span>@Policy?.POLICY_NO [@Policy?.POLICY_EFFECTIVE_DATE.ToShortDateString() - @Policy?.POLICY_EXPIRATION_DATE.ToShortDateString()]</span>
            </div>
            <div>
                <label class="me-2"><strong>Renewal:</strong></label>
                <span>@Policy?.POLICY_RENEW_NO</span>
            </div>
            <div>
                <label class="me-2"><strong>Term ID:</strong></label>
                <span>@Policy?.POLICY_TERM_ID</span>
            </div>
            <div>
                <label class="me-2"><strong>Insured:</strong></label>
                <span>@InsuredName</span>
            </div>
            <div>
                <label class="me-2"><strong>Account #:</strong></label>
                <a href="@($"/account-view/{AccountNumber}")">@AccountNumber</a>
            </div>
        </div>
    </div>
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "InsuredInfo" ? "active" : "")" @onclick='() => SetTab("InsuredInfo")'>Insured Info</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "PolicyInfo" ? "active" : "")" @onclick='() => SetTab("PolicyInfo")'>Policy Info</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Balances" ? "active" : "")" @onclick='() => SetTab("Balances")'>Balances</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "CancellationHold" ? "active" : "")" @onclick='() => SetTab("CancellationHold")'>Cancellation / Hold</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "PolicyEntities" ? "active" : "")" @onclick='() => SetTab("PolicyEntities")'>Policy Entities</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "CommissionBalance" ? "active" : "")" @onclick='() => SetTab("CommissionBalance")'>Commission Balance</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Transactions" ? "active" : "")" @onclick='() => SetTab("Transactions")'>Transactions</a>
        </li>
    </ul>

    @* <div class="card">
        <div class="card-body">
            <h5 class="card-title">Policy #: @Policy.POLICY_NO</h5>
            <p><strong>Status:</strong> @Policy.SYSTEM_STATUS</p>
            <p><strong>Legal Status:</strong> @Policy.LEGAL_STATUS</p>
            <p><strong>Product:</strong> @Policy.PRODUCT_CODE</p>
            <p><strong>Effective:</strong> @Policy.POLICY_EFFECTIVE_DATE.ToShortDateString()</p>
            <p><strong>Expiration:</strong> @Policy.POLICY_EXPIRATION_DATE.ToShortDateString()</p>
        </div>
    </div> *@
}
else
{
    <p>No policy found.</p>
}

@if (AccountNumber != null)
{
    <button class="btn btn-secondary mb-3" @onclick="GoBackToAccount">Back to Account</button>
}

@if (ActiveTab == "InsuredInfo")
{
    <div class="row">
        <div class="col-md-4">
            <!-- Insured Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Insured:</strong> @InsuredName</div>
                    <div>@InsuredStreet</div>
                    <div>@InsuredCity, @InsuredState @InsuredZip</div>
                    <div>@InsuredCountry</div>
                </div>
                <div class="card-body">
                    <div><strong>Bill To:</strong> @BillToName</div>
                    <div>@BillToStreet</div>
                    <div>@BillToCity, @BillToState @BillToZip</div>
                    <div>@BillToCountry</div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <!-- Bill Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Bill Type:</strong> Account Bill</div>
                    <div><strong>Bill Sub Type:</strong> Chancery Bill</div>
                    <div><strong>Due Day:</strong> 1</div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <!-- Agency Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Agency:</strong> <a href="#">BG-JIM GUDENRATH</a></div>
                    <div><strong>Output Delivery Method:</strong> Mail</div>
                    <div><strong>Invoicing Currency:</strong> US Dollar</div>
                </div>
            </div>
        </div>
    </div>
}
@if (ActiveTab == "PolicyEntities")
{
    <div>
        @if (IsPolicyEntitiesLoading)
        {
            <p>Loading policy entities...</p>
        }
        else if (!FilteredPolicyEntities.Any())
        {
            <p>No policy entities found.</p>
        }
        else
        {
            <div class="form-group mb-2">
                <small class="text-muted">Search by type, code, name, address, city, or year/date (e.g., 2020 or 01/01/2020)</small>
                <div style="position: relative; display: flex;">
                    <input class="form-control" type="text"
                           placeholder="Search policy entities..."
                           value="@PolicyEntitySearchTerm"
                           @oninput="OnPolicyEntitySearchChanged"
                           style="padding-right: 2rem;" />
                    @if (!string.IsNullOrEmpty(PolicyEntitySearchTerm))
                    {
                        <button type="button"
                                class="input-clear-btn"
                                style="position: absolute; right: 0.5rem; top: 50%; transform: translateY(-50%); color: #888;"
                                @onclick="() => { PolicyEntitySearchTerm = string.Empty; UpdateAccordionExpansionForSearch(); }"
                                tabindex="-1"
                                aria-label="Clear search">
                            &#10005;
                        </button>
                    }
                </div>
            </div>
            <div class="mb-2">
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="ExpandAllAccordions">Expand All</button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="CollapseAllAccordions">Collapse All</button>
            </div>
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>ENTITY TYPE</th>
                        <th>ENTITY CODE</th>
                        <th>ADDRESS TYPE</th>
                        <th>NAME</th>
                        <th>ADDRESS</th>
                        <th>CITY</th>
                        <th>STATE</th>
                        <th>COUNTRY</th>
                        <th>ZIP CODE</th>
                        <th>EMAIL ID</th>
                        <th>PHONE NO</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var typeGroup in FilteredPolicyEntities.GroupBy(e => e.ENTITY_TYPE))
                    {
                        var isTypeExpanded = ExpandedEntityTypes.Contains(typeGroup.Key);
                        <tr class="table-primary" style="cursor:pointer" @onclick="@(() => ToggleTypeAccordion(typeGroup.Key))">
                            <td colspan="11">
                                <span style="font-size:1.2em;display:inline-block;width:1.5em;text-align:center;">
                                    @(isTypeExpanded ? "–" : "+")
                                </span>
                                <b>@typeGroup.Key Information</b>
                            </td>
                        </tr>
                        @if (isTypeExpanded)
                        {
                            @foreach (var entityGroup in typeGroup.GroupBy(e => e.SYSTEM_ENTITY_CODE))
                            {
                                var entityKey = GetEntityCodeKey(typeGroup.Key, entityGroup.Key);
                                var isEntityExpanded = ExpandedEntityCodes.Contains(entityKey);
                                <tr class="table-secondary" style="cursor:pointer" @onclick="@(() => ToggleEntityAccordion(entityKey))">
                                    <td>@typeGroup.Key</td>
                                    <td>
                                        <span style="font-size:1.2em;display:inline-block;width:1.5em;text-align:center;">
                                            @(isEntityExpanded ? "–" : "+")
                                        </span>
                                        @entityGroup.Key
                                    </td>
                                    <td colspan="9"></td>
                                </tr>
                                @if (isEntityExpanded)
                                {
                                    @foreach (var entity in entityGroup)
                                    {
                                        if (EntityAddresses.TryGetValue(entity.SYSTEM_ENTITY_CODE, out var addresses))
                                        {
                                            foreach (var address in addresses)
                                            {
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td>@address.ADDRESS_TYPE</td>
                                                    <td>@address.FULL_NAME</td>
                                                    <td>@($"{address.ADDRESS1} {address.ADDRESS2}")</td>
                                                    <td>@address.CITY</td>
                                                    <td>@address.STATE</td>
                                                    <td>@address.COUNTRY</td>
                                                    <td>@address.ZIP_CODE</td>
                                                    <td><!-- EMAIL ID here if available --></td>
                                                    <td><!-- PHONE NO here if available --></td>
                                                </tr>
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                </tbody>
            </table>
        }
    </div>
}
@if (ActiveTab == "Transactions")
{
    <div>
        <h5>Policy Transactions</h5>
        <div class="form-group mb-2">
            <small class="text-muted">Search by sequence, type, date, or user</small>
            <div style="position: relative; display: flex;">
                <input class="form-control" type="text"
                       placeholder="Search transactions..."
                       value="@TransactionSearchTerm"
                       @oninput="OnTransactionSearchChanged"
                       style="padding-right: 2rem;" />
                @if (!string.IsNullOrEmpty(TransactionSearchTerm))
                {
                    <button type="button"
                            class="input-clear-btn"
                            style="position: absolute; right: 0.5rem; top: 50%; transform: translateY(-50%); color: #888;"
                            @onclick="() => TransactionSearchTerm = string.Empty"
                            tabindex="-1"
                            aria-label="Clear search">
                        &#10005;
                    </button>
                }
            </div>
        </div>
        @if (IsTransactionsLoading)
        {
            <p>Loading transactions...</p>
        }
        else if (!string.IsNullOrEmpty(TransactionsErrorMessage))
        {
            <div class="alert alert-danger">@TransactionsErrorMessage</div>
        }
        else if (PolicyTransactions.Count == 0)
        {
            <p>No transactions found for this policy.</p>
        }
        else
        {
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>Transaction Seq</th>
                        <th>Type</th>
                        <th>Entry Date</th>
                        <th>Effective Date</th>
                        <th>Expiry Date</th>
                        <th>Amount</th>
                        <th>Created By</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tx in FilteredPolicyTransactions)
                    {
                        <tr>
                            <td>@tx.SYSTEM_TRANSACTION_SEQ</td>
                            <td>@tx.TRANSACTION_TYPE</td>
                            <td>@tx.CREATED_ON?.ToShortDateString()</td>
                            <td>@tx.TRANSACTION_EFF_DATE.ToShortDateString()</td>
                            <td>@tx.TRANSACTION_EXPIRY_DATE?.ToShortDateString()</td>
                            <td>@((tx.PAYMENT.HasValue && tx.PAYMENT.Value != 0) ? tx.PAYMENT.Value.ToString("N2") : "")</td>
                            <td>@tx.CREATED_BY</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    [Parameter] public string PolicyNo { get; set; }
    private string? RenewalNumber;
    private string? AccountNumber;

    private POLICY_REGISTER? Policy;
    private ENTITY_REGISTER? InsuredEntity;
    private bool IsLoading = true;
    private string? ErrorMessage;

    private string ActiveTab = "InsuredInfo";
    private string? InsuredName;
    private string? InsuredStreet;
    private string? InsuredCity;
    private string? InsuredState;
    private string? InsuredZip;
    private string? InsuredCountry;

    private string? BillToName;
    private string? BillToStreet;
    private string? BillToCity;
    private string? BillToState;
    private string? BillToZip;
    private string? BillToCountry;

    private List<TransactionDto> PolicyTransactions = new();
    private bool IsTransactionsLoading = false;
    private string? TransactionsErrorMessage;


    private List<POLICY_ENTITY_REGISTER> PolicyEntities = new();
    private Dictionary<decimal, List<ENTITY_ADDRESS_INFO>> EntityAddresses = new();
    private bool IsPolicyEntitiesLoading = true;
    private HashSet<string> ExpandedEntityTypes = new();
    private HashSet<string> ExpandedEntityCodes = new();
    private string GetEntityCodeKey(string entityType, decimal entityCode) => $"{entityType}|{entityCode}";

    private void SetTab(string tab)
    {
        ActiveTab = tab;
        if (tab == "Transactions")
        {
            _ = LoadPolicyTransactionsAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accountNumber", out var accountNumber))
        {
            AccountNumber = accountNumber;
        }

        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            var result = await client.GetFromJsonAsync<List<POLICY_REGISTER>>($"api/Policy/ByPolicyNumActive/{PolicyNo}");

            var accountBillableResult = await client.GetFromJsonAsync<List<POLICY_ENTITY_REGISTER>>($"api/Policy/PolicyEntitiesByTermId/{result.FirstOrDefault<POLICY_REGISTER>().POLICY_TERM_ID}");
            var accountDetailsResult = await client.GetFromJsonAsync<ENTITY_REGISTER>($"api/EntityRegister/details/system/{result.FirstOrDefault<POLICY_REGISTER>().BILL_TO_SYSTEM_CODE}");

            Policy = result?.FirstOrDefault();
            if (Policy == null)
            {
                ErrorMessage = "No active policy found for this policy number.";
            }
            else
            {
                // Get all policy entities for this term
                PolicyEntities = await client.GetFromJsonAsync<List<POLICY_ENTITY_REGISTER>>($"api/Policy/PolicyEntitiesByTermId/{Policy.POLICY_TERM_ID}");

                // For each SYSTEM_ENTITY_CODE, get all addresses
                foreach (var entity in PolicyEntities)
                {
                    if (!EntityAddresses.ContainsKey(entity.SYSTEM_ENTITY_CODE))
                    {
                        var addresses = await client.GetFromJsonAsync<List<ENTITY_ADDRESS_INFO>>(
                            $"api/EntityAddress/all/{entity.SYSTEM_ENTITY_CODE}");
                        EntityAddresses[entity.SYSTEM_ENTITY_CODE] = addresses ?? new List<ENTITY_ADDRESS_INFO>();
                    }
                }

                AccountNumber = accountDetailsResult?.SOURCE_SYSTEM_ENTITY_CODE;

                await SetInsuredDetails(accountBillableResult);
                await SetBillableDetails(accountBillableResult);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading policy: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            IsPolicyEntitiesLoading = false;
        }
    }

    private async Task SetInsuredDetails(List<POLICY_ENTITY_REGISTER> policies)
    {
        var insuredEntityCode = policies.FirstOrDefault(e => e.ENTITY_TYPE == "INSURED").SYSTEM_ENTITY_CODE;

        var client = HttpClientFactory.CreateClient("BillingDataApi");
        var address = await client.GetFromJsonAsync<ENTITY_ADDRESS_INFO>($"api/EntityAddress/{insuredEntityCode}");

        InsuredName = address.FULL_NAME;
        InsuredStreet = address.ADDRESS1 + "\r" + address.ADDRESS2;
        InsuredCity = address.CITY;
        InsuredState = address.STATE;
        InsuredZip = address.ZIP_CODE;
        InsuredCountry = address.COUNTRY;
    }

    private async Task SetBillableDetails(List<POLICY_ENTITY_REGISTER> policies)
    {
        var billableEntityCode = policies.FirstOrDefault(e => e.BILLING_ENTITY_YN == "Y").SYSTEM_ENTITY_CODE;

        var client = HttpClientFactory.CreateClient("BillingDataApi");
        var addressResult = await client.GetFromJsonAsync<ENTITY_ADDRESS_INFO>($"api/EntityAddress/{billableEntityCode}");

        BillToName = addressResult.FULL_NAME;
        BillToStreet = addressResult.ADDRESS1 + "\r" + addressResult.ADDRESS2;
        BillToCity = addressResult.CITY;
        BillToState = addressResult.STATE;
        BillToZip = addressResult.ZIP_CODE;
        BillToCountry = addressResult.COUNTRY;
    }

    private string PolicyEntitySearchTerm { get; set; } = string.Empty;

    private IEnumerable<POLICY_ENTITY_REGISTER> FilteredPolicyEntities =>
    string.IsNullOrWhiteSpace(PolicyEntitySearchTerm)
        ? PolicyEntities
        : PolicyEntities.Where(e =>
            (e.ENTITY_TYPE?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (e.SYSTEM_ENTITY_CODE.ToString().Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (EntityAddresses.TryGetValue(e.SYSTEM_ENTITY_CODE, out var addresses) &&
                addresses.Any(a =>
                    (a.ADDRESS_TYPE?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.FULL_NAME?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.ADDRESS1?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.ADDRESS2?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.CITY?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.STATE?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.COUNTRY?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.ZIP_CODE?.Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    // Date/year search for address fields if you have any date fields, e.g.:
                    // (a.SomeDateField?.ToString("yyyy-MM-dd").Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    // (a.SomeDateField?.Year.ToString().Contains(PolicyEntitySearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                    false // Remove or replace if you add date fields above
                )
            )
        );

    private async Task LoadPolicyTransactionsAsync()
    {
        if (Policy == null || string.IsNullOrWhiteSpace(Policy.POLICY_NO))
            return;

        IsTransactionsLoading = true;
        TransactionsErrorMessage = null;
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            var url = $"api/Transactions/bypolicynumberandterm?policyNumber={Policy.POLICY_NO}&policyTermId={Policy.POLICY_TERM_ID}";
            var result = await client.GetFromJsonAsync<List<TransactionDto>>(url);
            PolicyTransactions = result ?? new List<TransactionDto>();
        }
        catch (Exception ex)
        {
            TransactionsErrorMessage = $"Error loading transactions: {ex.Message}";
            PolicyTransactions = new List<TransactionDto>();
        }
        finally
        {
            IsTransactionsLoading = false;
            StateHasChanged();
        }
    }

    private string TransactionSearchTerm { get; set; } = string.Empty;

    private IEnumerable<TransactionDto> FilteredPolicyTransactions =>
    string.IsNullOrWhiteSpace(TransactionSearchTerm)
        ? PolicyTransactions
        : PolicyTransactions.Where(tx =>
            (tx.SYSTEM_TRANSACTION_SEQ.ToString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (tx.TRANSACTION_TYPE?.Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (tx.CREATED_ON?.ToShortDateString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (tx.TRANSACTION_EFF_DATE.ToShortDateString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (tx.TRANSACTION_EXPIRY_DATE?.ToShortDateString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (tx.PAYMENT != null && tx.PAYMENT.Value.ToString().Replace(",", "").Contains(TransactionSearchTerm.Replace(",", ""), StringComparison.OrdinalIgnoreCase)) ||
            (tx.CREATED_BY?.Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    private void OnTransactionSearchChanged(ChangeEventArgs e)
    {
        TransactionSearchTerm = e.Value?.ToString() ?? string.Empty;
    }

    private void UpdateAccordionExpansionForSearch()
    {
        if (string.IsNullOrWhiteSpace(PolicyEntitySearchTerm))
        {
            // Collapse all if search is empty
            ExpandedEntityTypes.Clear();
            ExpandedEntityCodes.Clear();
            return;
        }

        if (!FilteredPolicyEntities.Any())
        {
            ExpandedEntityTypes.Clear();
            ExpandedEntityCodes.Clear();
        }

        // Expand only types and codes that have matches in the filtered set
        var filtered = FilteredPolicyEntities.ToList();
        ExpandedEntityTypes = filtered
            .Select(e => e.ENTITY_TYPE)
            .Distinct()
            .ToHashSet();

        ExpandedEntityCodes = filtered
            .Select(e => GetEntityCodeKey(e.ENTITY_TYPE, e.SYSTEM_ENTITY_CODE))
            .Distinct()
            .ToHashSet();
    }

    private void OnPolicyEntitySearchChanged(ChangeEventArgs e)
    {
        PolicyEntitySearchTerm = e.Value?.ToString() ?? string.Empty;
        UpdateAccordionExpansionForSearch();
    }

    private void ExpandAllAccordions()
    {
        // Expand all entity types
        ExpandedEntityTypes = PolicyEntities
            .Select(e => e.ENTITY_TYPE)
            .Distinct()
            .ToHashSet();

        // Expand all entity codes (type|code)
        ExpandedEntityCodes = PolicyEntities
            .Select(e => GetEntityCodeKey(e.ENTITY_TYPE, e.SYSTEM_ENTITY_CODE))
            .Distinct()
            .ToHashSet();
    }

    private void CollapseAllAccordions()
    {
        ExpandedEntityTypes.Clear();
        ExpandedEntityCodes.Clear();
    }

    private void ToggleTypeAccordion(string entityType)
    {
        if (!ExpandedEntityTypes.Add(entityType))
            ExpandedEntityTypes.Remove(entityType);
    }

    private void ToggleEntityAccordion(string entityKey)
    {
        if (!ExpandedEntityCodes.Add(entityKey))
            ExpandedEntityCodes.Remove(entityKey);
    }

    private void GoBackToAccount()
    {
        if (!string.IsNullOrEmpty(AccountNumber))
        {
            NavigationManager.NavigateTo($"/account-view/{AccountNumber}");
        }
    }

}
