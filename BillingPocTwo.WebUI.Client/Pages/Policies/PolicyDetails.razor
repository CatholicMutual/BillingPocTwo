@page "/policy-details/{PolicyNo}"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Policy Details</h3>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (Policy != null)
{
    <div class="card mb-2">
        <div class="card-body d-flex flex-wrap align-items-center justify-content-between">
            <div>
                <label class="me-2"><strong>Policy:</strong></label>
                <span>@Policy?.POLICY_NO [@Policy?.POLICY_EFFECTIVE_DATE.ToShortDateString() - @Policy?.POLICY_EXPIRATION_DATE.ToShortDateString()]</span>
            </div>
            <div>
                <label class="me-2"><strong>Renewal:</strong></label>
                <span>@Policy?.POLICY_RENEW_NO</span>
            </div>
            <div>
                <label class="me-2"><strong>Insured:</strong></label>
                <span>@InsuredName</span>
            </div>
            <div>
                <label class="me-2"><strong>Account #:</strong></label>
                <a href="@($"/account-view/{AccountNumber}")">@AccountNumber</a>
            </div>
        </div>
    </div>
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "InsuredInfo" ? "active" : "")" @onclick='() => SetTab("InsuredInfo")'>Insured Info</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "PolicyInfo" ? "active" : "")" @onclick='() => SetTab("PolicyInfo")'>Policy Info</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Balances" ? "active" : "")" @onclick='() => SetTab("Balances")'>Balances</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "CancellationHold" ? "active" : "")" @onclick='() => SetTab("CancellationHold")'>Cancellation / Hold</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "PolicyEntities" ? "active" : "")" @onclick='() => SetTab("PolicyEntities")'>Policy Entities</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "CommissionBalance" ? "active" : "")" @onclick='() => SetTab("CommissionBalance")'>Commission Balance</a>
        </li>
    </ul>

    @* <div class="card">
        <div class="card-body">
            <h5 class="card-title">Policy #: @Policy.POLICY_NO</h5>
            <p><strong>Status:</strong> @Policy.SYSTEM_STATUS</p>
            <p><strong>Legal Status:</strong> @Policy.LEGAL_STATUS</p>
            <p><strong>Product:</strong> @Policy.PRODUCT_CODE</p>
            <p><strong>Effective:</strong> @Policy.POLICY_EFFECTIVE_DATE.ToShortDateString()</p>
            <p><strong>Expiration:</strong> @Policy.POLICY_EXPIRATION_DATE.ToShortDateString()</p>
        </div>
    </div> *@
}
else
{
    <p>No policy found.</p>
}

@if (AccountNumber != null)
{
    <button class="btn btn-secondary mb-3" @onclick="GoBackToAccount">Back to Account</button>
}

@if (ActiveTab == "InsuredInfo")
{
    <div class="row">
        <div class="col-md-4">
            <!-- Insured Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Insured:</strong> @InsuredName</div>
                    <div>@InsuredStreet</div>
                    <div>@InsuredCity, @InsuredState @InsuredZip</div>
                    <div>@InsuredCountry</div>
                </div>
                <div class="card-body">
                    <div><strong>Bill To:</strong> @BillToName</div>
                    <div>@BillToStreet</div>
                    <div>@BillToCity, @BillToState @BillToZip</div>
                    <div>@BillToCountry</div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <!-- Bill Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Bill Type:</strong> Account Bill</div>
                    <div><strong>Bill Sub Type:</strong> Chancery Bill</div>
                    <div><strong>Due Day:</strong> 1</div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <!-- Agency Info Card -->
            <div class="card mb-3">
                <div class="card-body">
                    <div><strong>Agency:</strong> <a href="#">BG-JIM GUDENRATH</a></div>
                    <div><strong>Output Delivery Method:</strong> Mail</div>
                    <div><strong>Invoicing Currency:</strong> US Dollar</div>
                </div>
            </div>
        </div>
    </div>
}
@if (ActiveTab == "PolicyEntities")
{
    <div>
        @if (IsPolicyEntitiesLoading)
        {
            <p>Loading policy entities...</p>
        }
        else if (PolicyEntities.Count == 0)
        {
            <p>No policy entities found.</p>
        }
        else
        {
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>ENTITY TYPE</th>
                        <th>ENTITY CODE</th>
                        <th>ADDRESS TYPE</th>
                        <th>NAME</th>
                        <th>ADDRESS</th>
                        <th>CITY</th>
                        <th>STATE</th>
                        <th>COUNTRY</th>
                        <th>ZIP CODE</th>
                        <th>EMAIL ID</th>
                        <th>PHONE NO</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var typeGroup in PolicyEntities.GroupBy(e => e.ENTITY_TYPE))
                    {
                        var isExpanded = ExpandedEntityTypes.Contains(typeGroup.Key);
                        <tr class="table-primary" style="cursor:pointer" @onclick="@(() => ToggleAccordion(typeGroup.Key))">
                            <td colspan="11">
                                <span style="font-size:1.2em;display:inline-block;width:1.5em;text-align:center;">
                                    @(isExpanded ? "–" : "+")
                                </span>
                                <b>@typeGroup.Key's Information</b>
                            </td>
                        </tr>
                        @if (isExpanded)
                        {
                            @foreach (var entityGroup in typeGroup.GroupBy(e => e.SYSTEM_ENTITY_CODE))
                            {
                                <tr class="table-secondary">
                                    <td>@typeGroup.Key</td>
                                    <td>@entityGroup.Key</td>
                                    <td colspan="9"></td>
                                </tr>
                                @foreach (var entity in entityGroup)
                                {
                                    if (EntityAddresses.TryGetValue(entity.SYSTEM_ENTITY_CODE, out var addresses))
                                    {
                                        foreach (var address in addresses)
                                        {
                                            <tr>
                                                <td></td>
                                                <td></td>
                                                <td>@address.ADDRESS_TYPE</td>
                                                <td>@address.FULL_NAME</td>
                                                <td>@($"{address.ADDRESS1} {address.ADDRESS2}")</td>
                                                <td>@address.CITY</td>
                                                <td>@address.STATE</td>
                                                <td>@address.COUNTRY</td>
                                                <td>@address.ZIP_CODE</td>
                                                <td><!-- EMAIL ID here if available --></td>
                                                <td><!-- PHONE NO here if available --></td>
                                            </tr>
                                        }
                                    }
                                }
                            }
                        }
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    [Parameter] public string PolicyNo { get; set; }
    private string? RenewalNumber;
    private string? AccountNumber;

    private POLICY_REGISTER? Policy;
    private ENTITY_REGISTER? InsuredEntity;
    private bool IsLoading = true;
    private string? ErrorMessage;

    private string ActiveTab = "InsuredInfo";
    private string? InsuredName;
    private string? InsuredStreet;
    private string? InsuredCity;
    private string? InsuredState;
    private string? InsuredZip;
    private string? InsuredCountry;

    private string? BillToName;
    private string? BillToStreet;
    private string? BillToCity;
    private string? BillToState;
    private string? BillToZip;
    private string? BillToCountry;

    private List<POLICY_ENTITY_REGISTER> PolicyEntities = new();
    private Dictionary<decimal, List<ENTITY_ADDRESS_INFO>> EntityAddresses = new();
    private bool IsPolicyEntitiesLoading = true;
    private HashSet<string> ExpandedEntityTypes = new();

    private void SetTab(string tab) => ActiveTab = tab;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accountNumber", out var accountNumber))
        {
            AccountNumber = accountNumber;
        }

        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            var result = await client.GetFromJsonAsync<List<POLICY_REGISTER>>($"api/Policy/ByPolicyNumActive/{PolicyNo}");

            var accountBillableResult = await client.GetFromJsonAsync<List<POLICY_ENTITY_REGISTER>>($"api/Policy/PolicyEntitiesByTermId/{result.FirstOrDefault<POLICY_REGISTER>().POLICY_TERM_ID}");
            var accountDetailsResult = await client.GetFromJsonAsync<ENTITY_REGISTER>($"api/EntityRegister/details/system/{result.FirstOrDefault<POLICY_REGISTER>().BILL_TO_SYSTEM_CODE}");

            Policy = result?.FirstOrDefault();
            if (Policy == null)
            {
                ErrorMessage = "No active policy found for this policy number.";
            }
            else
            {
                // Get all policy entities for this term
                PolicyEntities = await client.GetFromJsonAsync<List<POLICY_ENTITY_REGISTER>>($"api/Policy/PolicyEntitiesByTermId/{Policy.POLICY_TERM_ID}");

                // For each SYSTEM_ENTITY_CODE, get all addresses
                foreach (var entity in PolicyEntities)
                {
                    if (!EntityAddresses.ContainsKey(entity.SYSTEM_ENTITY_CODE))
                    {
                        var addresses = await client.GetFromJsonAsync<List<ENTITY_ADDRESS_INFO>>(
                            $"api/EntityAddress/all/{entity.SYSTEM_ENTITY_CODE}");
                        EntityAddresses[entity.SYSTEM_ENTITY_CODE] = addresses ?? new List<ENTITY_ADDRESS_INFO>();
                    }
                }

                AccountNumber = accountDetailsResult?.SOURCE_SYSTEM_ENTITY_CODE;

                await SetInsuredDetails(accountBillableResult);
                await SetBillableDetails(accountBillableResult);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading policy: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            IsPolicyEntitiesLoading = false;
        }
    }

    private async Task SetInsuredDetails(List<POLICY_ENTITY_REGISTER> policies)
    {
        var insuredEntityCode = policies.FirstOrDefault(e => e.ENTITY_TYPE == "INSURED").SYSTEM_ENTITY_CODE;

        var client = HttpClientFactory.CreateClient("BillingDataApi");
        var address = await client.GetFromJsonAsync<ENTITY_ADDRESS_INFO>($"api/EntityAddress/{insuredEntityCode}");

        InsuredName = address.FULL_NAME;
        InsuredStreet = address.ADDRESS1 + "\r" + address.ADDRESS2;
        InsuredCity = address.CITY;
        InsuredState = address.STATE;
        InsuredZip = address.ZIP_CODE;
        InsuredCountry = address.COUNTRY;
    }

    private async Task SetBillableDetails(List<POLICY_ENTITY_REGISTER> policies)
    {
        var billableEntityCode = policies.FirstOrDefault(e => e.BILLING_ENTITY_YN == "Y").SYSTEM_ENTITY_CODE;

        var client = HttpClientFactory.CreateClient("BillingDataApi");
        var addressResult = await client.GetFromJsonAsync<ENTITY_ADDRESS_INFO>($"api/EntityAddress/{billableEntityCode}");

        BillToName = addressResult.FULL_NAME;
        BillToStreet = addressResult.ADDRESS1 + "\r" + addressResult.ADDRESS2;
        BillToCity = addressResult.CITY;
        BillToState = addressResult.STATE;
        BillToZip = addressResult.ZIP_CODE;
        BillToCountry = addressResult.COUNTRY;
    }

    private void ToggleAccordion(string entityType)
    {
        if (!ExpandedEntityTypes.Add(entityType))
            ExpandedEntityTypes.Remove(entityType);
    }

    private void GoBackToAccount()
    {
        if (!string.IsNullOrEmpty(AccountNumber))
        {
            NavigationManager.NavigateTo($"/account-view/{AccountNumber}");
        }
    }

}
