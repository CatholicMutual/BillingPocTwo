@page "/user-profile"
@using BillingPocTwo.Shared.DataObjects.UserAccount

@inject GraphServiceClient GraphServiceClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<h3>User Profile</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}
else if (userProfile != null)
{
    <div>
        <p><strong>First Name:</strong> @userProfile.FirstName</p>
        <p><strong>Last Name:</strong> @userProfile.LastName</p>
        <p><strong>Email:</strong> @userProfile.Email</p>
        <p><strong>User ID:</strong> @userProfile.UserId</p>
        <p><strong>Active Roles:</strong></p>
        <ul>
            @foreach (var role in userProfile.Roles)
            {
                <li>@role</li>
            }
        </ul>
    </div>
}

@if (isAdmin)
{
    <div>
        <h4>Search for a User</h4>
        <input @bind="searchEmail" placeholder="Enter user email" />
        <button @onclick="SearchUser">Search</button>
    </div>
}

@code {
    private UserProfileDto userProfile;
    private string message = string.Empty;
    private bool isLoading = false;
    private bool isAdmin = false;
    private string searchEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserRole();
        await LoadUserProfile();
    }

    private async Task CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("[\"Admin\"]");
    }

    private async Task LoadUserProfile()
    {
        isLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var email = user.FindFirst(c =>
            c.Type == "email" ||
            c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress" ||
            c.Type == "preferred_username")?.Value;

        if (string.IsNullOrEmpty(email))
        {
            message = "Failed to retrieve user email.";
            isLoading = false;
            return;
        }

        await FetchUserProfile(email);
    }

    private async Task SearchUser()
    {
        if (string.IsNullOrEmpty(searchEmail))
        {
            message = "Please enter an email to search.";
            return;
        }

        try
        {
            isLoading = true;

            // Use GraphServiceClient to fetch user details from Azure AD
            var azureAdUser = await GraphServiceClient.Users[searchEmail].GetAsync();

            // Fetch the user's app role assignments
            var appRoleAssignments = await GraphServiceClient.Users[searchEmail].AppRoleAssignments.GetAsync();

            var roleNames = new List<string>();
            foreach (var appRoleAssignment in appRoleAssignments.Value)
            {
                // Check if the app role assignment is for this application
                if (appRoleAssignment.ResourceDisplayName == "BillingPocTwo.WebUI.Auth") 
                {
                    // Map AppRoleId to role name
                    if (Guid.TryParse(appRoleAssignment.AppRoleId.ToString(), out var appRoleId) &&
                        AppRoleMappings.TryGetValue(appRoleId, out var roleName))
                    {
                        roleNames.Add(roleName);
                    }
                }
            }

            // Populate the user profile
            userProfile = new UserProfileDto
                {
                    Email = azureAdUser.Mail ?? azureAdUser.UserPrincipalName,
                    UserId = Guid.Parse(azureAdUser.Id),
                    FirstName = azureAdUser.GivenName,
                    LastName = azureAdUser.Surname,
                    Roles = roleNames
                };

            message = string.Empty;
        }
        catch (Exception ex)
        {
            message = $"An error occurred while searching for the user: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchUserProfile(string email)
    {
        try
        {
            // Use GraphServiceClient to fetch user details from Azure AD
            var azureAdUser = await GraphServiceClient.Users[email].GetAsync();

            // Fetch the user's app role assignments (requires User.Read.All or AppRoleAssignment.Read.All permission)
            var appRoleAssignments = await GraphServiceClient.Users[email].AppRoleAssignments.GetAsync();

            var roleNames = new List<string>();
            foreach (var appRoleAssignment in appRoleAssignments.Value)
            {
                // Check if the app role assignment is for this application
                if (appRoleAssignment.ResourceDisplayName == "BillingPocTwo.WebUI.Auth") 
                {
                    // Map AppRoleId to role name from static method below
                    if (Guid.TryParse(appRoleAssignment.AppRoleId.ToString(), out var appRoleId) &&
                        AppRoleMappings.TryGetValue(appRoleId, out var roleName))
                    {
                        roleNames.Add(roleName);
                    }
                }
            }

            userProfile = new UserProfileDto
                {
                    Email = azureAdUser.Mail ?? azureAdUser.UserPrincipalName,
                    UserId = Guid.Parse(azureAdUser.Id),
                    FirstName = azureAdUser.GivenName,
                    LastName = azureAdUser.Surname,
                    Roles = roleNames // Use app role names
                };

            message = string.Empty;
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // uses GUID in Entra to map to role name
    private static readonly Dictionary<Guid, string> AppRoleMappings = new()
    {
        { Guid.Parse("8bc6503e-9e03-47a3-bd0b-53667ee2f83a"), "Admin" }, // GUID from app registration in Entra 
        { Guid.Parse("70516a44-62b4-4698-bd3a-eb1111b87764"), "User" }  
    };
}

