@page "/change-password"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>Change Password</h3>

<EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Current Password:</label>
        <InputText @bind-Value="changePasswordModel.CurrentPassword" type="password" />
    </div>
    <div>
        <label>New Password:</label>
        <InputText @bind-Value="changePasswordModel.NewPassword" type="password" />
    </div>
    <div>
        <label>Confirm Password:</label>
        <InputText @bind-Value="changePasswordModel.ConfirmPassword" type="password" />
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Change Password</span>
        }
    </button>
</EditForm>

<p><em>@message</em></p>

@code {
    private ChangePasswordDto changePasswordModel = new ChangePasswordDto();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleChangePassword()
    {
        isLoading = true;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            message = "User is not authenticated";
            isLoading = false;
            return;
        }

        var claims = JwtParser.ParseClaimsFromJwt(token);
        var emailClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        if (string.IsNullOrEmpty(emailClaim))
        {
            message = "Failed to retrieve user email from token";
            isLoading = false;
            return;
        }

        changePasswordModel.Email = emailClaim;

        var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/change-password")
        {
            Content = JsonContent.Create(changePasswordModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "Password changed successfully";
            Navigation.NavigateTo("/welcome2");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            message = $"Failed to change password: {responseContent}";
        }
        isLoading = false;
    }
}
