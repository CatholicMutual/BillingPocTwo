@page "/account-view/{accountNumber}"

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

@attribute [Authorize]

<h3>Account</h3>

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-3">
        <div class="col">
            <h4>@AccountName</h4>
            <p>Account #: @AccountNumber</p>
        </div>
    </div>

    <!-- Tabs Section -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Account" ? "active" : "")" @onclick="SetTabAccount">Account</a>

        </li>
        @* <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Balances" ? "active" : "")" @onclick="SetTabBalances">Balances</a>

        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "HoldSuspend" ? "active" : "")" @onclick="SetTabHoldSuspend">Hold/Suspend</a>

        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "EntityRoles" ? "active" : "")" @onclick="SetTabEntityRoles">Entity Roles</a>
        </li> *@
    </ul>

    <!-- Account Details Section -->
    @if (ActiveTab == "Account")
    {
        <div class="row mt-3">
            <div class="col-md-6">
                <h5>Account Details</h5>
                <p><strong>Account:</strong> @AccountName</p>
                <p><strong>Address:</strong> @AccountAddress</p>
                <p><strong>Payment Method:</strong> @PaymentMethod</p>
                <p><strong>Cancelled Policy Count:</strong> @CancelledPolicyCount</p>
            </div>
            <div class="col-md-6">
                <h5>Billing Details</h5>
                <p><strong>Bill Type:</strong> @BillType</p>
                <p><strong>Bill To:</strong> @BillTo</p>
                <p><strong>Billing Address:</strong> @BillingAddress</p>
                <p><strong>Output Delivery Method:</strong> @OutputDeliveryMethod</p>
                <p><strong>Due Day:</strong> @DueDay</p>
            </div>
        </div>
    }

    <!-- Transactions Table -->
    <div class="row mt-4">
        <div class="col">
            <h5>Transactions</h5>
            <div class="form-inline mb-3">
                <label for="fromDate" class="mr-2">From Date:</label>
                <input type="date" id="fromDate" class="form-control mr-3" @bind="FromDate" />
                <label for="toDate" class="mr-2">To Date:</label>
                <input type="date" id="toDate" class="form-control mr-3" @bind="ToDate" />
                <button class="btn btn-primary" @onclick="LoadTransactions">View</button>
            </div>
            <div class="form-group mb-2">
                <small class="text-muted">Search by policy, user, description, or year/date (e.g., 2020 or 01/01/2020)</small>
                <div style="position: relative; display: flex;">
                    <input class="form-control" type="text"
                           placeholder="Search transactions..."
                           @bind="TransactionSearchTerm"
                           @bind:event="oninput"
                           style="padding-right: 2rem;" />
                    @if (!string.IsNullOrEmpty(TransactionSearchTerm))
                    {
                        <button type="button"
                                class="input-clear-btn"
                                style="position: absolute; right: 0.5rem; top: 50%; transform: translateY(-50%); color: #888;"
                                @onclick="() => TransactionSearchTerm = string.Empty"
                                tabindex="-1"
                                aria-label="Clear search">
                            &#10005;
                        </button>
                    }
                </div>
            </div>

            <div class="mb-2">
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="ExpandAllTransactionGroups">Expand All</button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="CollapseAllTransactionGroups">Collapse All</button>
            </div>
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>TRANSACTION ID</th>
                        <th>TYPE</th>
                        <th>ENTRY DATE</th>
                        <th>EFFECTIVE DATE</th>
                        <th>USER</th>
                        <th>POLICY #</th>
                        <th>AMOUNT</th>
                        <th>DESCRIPTION</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in FilteredGroupedMappedTransactions)
                    {
                        var groupKey = group.Key;
                        var isExpanded = ExpandedTransactionGroups.Contains(groupKey);
                        <tr class="table-primary" style="cursor:pointer; font-size: 1rem;" @onclick="@(() => ToggleTransactionGroup(groupKey))">
                            <td colspan="8">
                                <span style="font-size:1.2em;display:inline-block;width:1.5em;text-align:center;">
                                    @(isExpanded ? "–" : "+")
                                </span>
                                <b>@group.Key (Transactions: @group.Value.Count)</b>
                            </td>
                        </tr>
                        @if (isExpanded)
                        {
                            foreach (var transaction in group.Value)
                            {
                                <tr>
                                    <td>@transaction.TransactionId</td>
                                    <td>@transaction.Type</td>
                                    <td>@transaction.EntryDate.ToShortDateString()</td>
                                    <td>@transaction.EffectiveDate.ToShortDateString()</td>
                                    <td>@transaction.UserId</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(transaction.PolicyNo))
                                        {
                                            <a href="#"
                                               @onclick="(e => ShowPolicyDetails(transaction))"
                                               @onclick:preventDefault="true">
                                                @transaction.PolicyNo
                                            </a>
                                        }
                                    </td>
                                    <td>@((transaction.Amount.HasValue && transaction.Amount.Value != 0) ? transaction.Amount.Value.ToString("N2") : "")</td>
                                    <td>@transaction.OriginalTransactionDescription</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (ShowPolicyModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Policy Details</h5>
                    <button type="button" class="btn-close" @onclick="ClosePolicyModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Policy #:</strong> @SelectedPolicy?.POLICY_NO</p>
                    <p><strong>Transaction Type:</strong> @SelectedPolicy?.TRANSACTION_TYPE</p>
                    <p><strong>Entry Date:</strong> @SelectedPolicy?.CREATED_ON?.ToShortDateString()</p>
                    <p><strong>Effective Date:</strong> @SelectedPolicy?.TRANSACTION_EFF_DATE.ToShortDateString()</p>
                    <p><strong>Expiry Date:</strong> @SelectedPolicy?.TRANSACTION_EXPIRY_DATE?.ToShortDateString()</p>
                    <p><strong>User:</strong> @SelectedPolicy?.CREATED_BY</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => OpenPolicy(SelectedPolicy?.POLICY_NO)">Open Policy</button>
                    <button class="btn btn-secondary" @onclick="ClosePolicyModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string AccountNumber { get; set; }

    private string AccountName;
    private string AccountAddress;
    private string BillingAddress;
    private string PaymentMethod;
    private int CancelledPolicyCount;
    private string BillType;
    private string BillTo;
    private string OutputDeliveryMethod;
    private int DueDay;

    private void SetTab(string tab) => ActiveTab = tab;
    private void SetTabAccount() => SetTab("Account");
    private void SetTabBalances() => SetTab("Balances");
    private void SetTabHoldSuspend() => SetTab("HoldSuspend");
    private void SetTabEntityRoles() => SetTab("EntityRoles");
    private string ActiveTab = "Account";

    private DateTime FromDate = DateTime.Now.AddYears(-5); // Default to 6 months ago
    private DateTime ToDate = DateTime.Now; // Default to today

    private string SortColumn = nameof(TransactionDto.CREATED_ON); // Default sort column
    private bool SortAscending = true; // Default sort order

    private List<TRANSACTION_LOG?> AccountTransactions;
    private List<TransactionDto> Transactions = new();

    private bool ShowPolicyModal = false;
    private TransactionDto? SelectedPolicy;

    private HashSet<string> ExpandedTransactionGroups = new();

    private List<ITransaction> MappedTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountDetails();
    }

    private async Task LoadAccountDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");

            // Fetch account details
            var accountDetails = await client.GetFromJsonAsync<AccountDetailsDto>($"api/EntityRegister/details/dashboard/{AccountNumber}");

            if (accountDetails != null)
            {
                AccountName = !string.IsNullOrWhiteSpace(accountDetails.DOING_BUSINESS_AS_NAME)
                    ? accountDetails.DOING_BUSINESS_AS_NAME
                    : accountDetails.FULL_NAME;

                // Fetch addresses using SOURCE_SYSTEM_ENTITY_CODE
                var addresses = await client.GetFromJsonAsync<List<ENTITY_ADDRESS_INFO>>($"api/EntityAddress/addresses/{AccountNumber}");

                if (addresses != null && addresses.Any())
                {
                    // Assign physical address
                    var physicalAddress = addresses.FirstOrDefault(a => a.ADDRESS_TYPE == "PHYSICAL");
                    if (physicalAddress != null)
                    {
                        AccountAddress = $"{physicalAddress.ADDRESS1} {physicalAddress.ADDRESS2}, {physicalAddress.CITY}, {physicalAddress.STATE} {physicalAddress.ZIP_CODE}";
                    }

                    // Assign mailing address
                    var mailingAddress = addresses.FirstOrDefault(a => a.ADDRESS_TYPE == "MAILING");
                    if (mailingAddress != null)
                    {
                        BillingAddress = $"{mailingAddress.ADDRESS1} {mailingAddress.ADDRESS2}, {mailingAddress.CITY}, {mailingAddress.STATE} {mailingAddress.ZIP_CODE}";
                    }
                }

                PaymentMethod = "Check"; // Placeholder, update if needed
                CancelledPolicyCount = 0; // Placeholder, update if needed
                BillType = "Account Bill"; // Placeholder, update if needed
                BillTo = accountDetails.FULL_NAME;
                OutputDeliveryMethod = "Mail"; // Placeholder, update if needed
                DueDay = 1; // Placeholder, update if needed

                await LoadTransactions();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading account details: {ex.Message}");
        }
    }

    private async Task LoadTransactions()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            AccountTransactions = await client.GetFromJsonAsync<List<TRANSACTION_LOG>>(
                $"api/Transactions/byaccountnumber/{AccountNumber}?fromDate={FromDate:yyyy-MM-dd}&toDate={ToDate:yyyy-MM-dd}");

            if (AccountTransactions != null)
            {
                MappedTransactions = AccountTransactions
                    .Select(TransactionMapper.Map)
                    .ToList();
            }
            else
            {
                MappedTransactions = new List<ITransaction>();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void SortTransactions(string column)
    {
        if (SortColumn == column)
        {
            // Toggle sort order if the same column is clicked
            SortAscending = !SortAscending;
        }
        else
        {
            // Set new column and default to ascending order
            SortColumn = column;
            SortAscending = true;
        }
    }

    private RenderFragment RenderSortIcon(string column) => builder =>
    {
        if (SortColumn == column)
        {
            var icon = SortAscending ? "▲" : "▼"; // Up or down arrow
            builder.AddContent(0, icon);
        }
    };

    private string TransactionSearchTerm { get; set; } = string.Empty;

    private IEnumerable<KeyValuePair<string, List<ITransaction>>> FilteredGroupedMappedTransactions =>
    string.IsNullOrWhiteSpace(TransactionSearchTerm)
        ? GroupedMappedTransactions
        : GroupedMappedTransactions
            .Select(g => new KeyValuePair<string, List<ITransaction>>(
                g.Key,
                g.Value.Where(t =>
                    (t.TransactionId?.ToString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.Amount?.ToString().Replace(",", "").Contains(TransactionSearchTerm.Replace(",", ""), StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.PolicyNo?.Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.OriginalTransactionDescription?.Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.UserId?.Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    t.EntryDate.ToString("yyyy-MM-dd").Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.EntryDate.Year.ToString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.EffectiveDate.ToString("yyyy-MM-dd").Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.EffectiveDate.Year.ToString().Contains(TransactionSearchTerm, StringComparison.OrdinalIgnoreCase)
                ).ToList()
            ))
            .Where(g => g.Value.Any());

    private void ExpandAllTransactionGroups()
    {
        ExpandedTransactionGroups = GroupedMappedTransactions.Keys.ToHashSet();
    }

    private void CollapseAllTransactionGroups()
    {
        ExpandedTransactionGroups.Clear();
    }

    private void ToggleTransactionGroup(string groupKey)
    {
        if (!ExpandedTransactionGroups.Add(groupKey))
            ExpandedTransactionGroups.Remove(groupKey);
    }

    private void ShowPolicyDetails(ITransaction transaction)
    {
        if (transaction != null)
        {
            // If you want to show more details, you may want to map/cast to TransactionDto or use the ITransaction directly
            SelectedPolicy = new TransactionDto
                {
                    POLICY_NO = transaction.PolicyNo,
                    TRANSACTION_TYPE = transaction.OriginalTransactionDescription,
                    CREATED_ON = transaction.EntryDate,
                    TRANSACTION_EFF_DATE = transaction.EffectiveDate,
                // Set other fields as needed
                // TRANSACTION_EXPIRY_DATE = ...,
                // CREATED_BY = transaction.UserId,
                };
            ShowPolicyModal = true;
        }
    }
    private string? SelectedPolicyNumber { get; set; }

    private TransactionDto? ToTransactionDto(TRANSACTION_LOG? log)
    {
        if (log == null) return null;
        return new TransactionDto
            {
                SYSTEM_TRANSACTION_SEQ = log.SYSTEM_TRANSACTION_SEQ,
                POLICY_TERM_ID = log.POLICY_TERM_ID,
                POLICY_NO = log.POLICY_NO,
                TRANSACTION_TYPE = log.TRANSACTION_TYPE,
                CREATED_ON = log.CREATED_ON,
                TRANSACTION_EFF_DATE = log.TRANSACTION_EFF_DATE,
                TRANSACTION_EXPIRY_DATE = log.TRANSACTION_EXPIRY_DATE,
                CREATED_BY = log.CREATED_BY
            };
    }

    private void ClosePolicyModal()
    {
        ShowPolicyModal = false;
        SelectedPolicy = null;
    }

    private void OpenPolicy(string? policyNo)
    {
        if (!string.IsNullOrEmpty(policyNo))
        {
            NavigationManager.NavigateTo($"/policy-details/{policyNo}");
        }
    }

    private Dictionary<string, List<ITransaction>> GroupedMappedTransactions =>
    (MappedTransactions ?? new List<ITransaction>())
        .GroupBy(t => t.Type.ToString())
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    public class TransactionTypeGroup
    {
        public string TransactionType { get; set; }
        public List<TRANSACTION_LOG> Transactions { get; set; }
        public List<ASSIGNED_PAYMENT> Payments { get; set; }
    }

}
