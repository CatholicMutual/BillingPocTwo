@page "/account-view/{accountNumber}"

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

@attribute [Authorize]

<h3>Account</h3>

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-3">
        <div class="col">
            <h4>@AccountName</h4>
            <p>Account #: @AccountNumber</p>
        </div>
    </div>

    <!-- Tabs Section -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Account" ? "active" : "")" @onclick="SetTabAccount">Account</a>

        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "Balances" ? "active" : "")" @onclick="SetTabBalances">Balances</a>

        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "HoldSuspend" ? "active" : "")" @onclick="SetTabHoldSuspend">Hold/Suspend</a>

        </li>
        <li class="nav-item">
            <a class="nav-link @(ActiveTab == "EntityRoles" ? "active" : "")" @onclick="SetTabEntityRoles">Entity Roles</a>
        </li>
    </ul>

    <!-- Account Details Section -->
    @if (ActiveTab == "Account")
    {
        <div class="row mt-3">
            <div class="col-md-6">
                <h5>Account Details</h5>
                <p><strong>Account:</strong> @AccountName</p>
                <p><strong>Address:</strong> @AccountAddress</p>
                <p><strong>Payment Method:</strong> @PaymentMethod</p>
                <p><strong>Cancelled Policy Count:</strong> @CancelledPolicyCount</p>
            </div>
            <div class="col-md-6">
                <h5>Billing Details</h5>
                <p><strong>Bill Type:</strong> @BillType</p>
                <p><strong>Bill To:</strong> @BillTo</p>
                <p><strong>Billing Address:</strong> @BillingAddress</p>
                <p><strong>Output Delivery Method:</strong> @OutputDeliveryMethod</p>
                <p><strong>Due Day:</strong> @DueDay</p>
            </div>
        </div>
    }

    <!-- Transactions Table -->
    <div class="row mt-4">
        <div class="col">
            <h5>Transactions</h5>
            <div class="form-inline mb-3">
                <label for="fromDate" class="mr-2">From Date:</label>
                <input type="date" id="fromDate" class="form-control mr-3" @bind="FromDate" />
                <label for="toDate" class="mr-2">To Date:</label>
                <input type="date" id="toDate" class="form-control mr-3" @bind="ToDate" />
                <button class="btn btn-primary" @onclick="LoadTransactions">View</button>
            </div>
            <table class="table table-striped table-sm">
                <thead>
                    <tr>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.POLICY_NO))" style="cursor: pointer;">
                            Policy # @RenderSortIcon(nameof(TransactionDto.POLICY_NO))
                        </th>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.TRANSACTION_TYPE))" style="cursor: pointer;">
                            Transaction @RenderSortIcon(nameof(TransactionDto.TRANSACTION_TYPE))
                        </th>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.CREATED_ON))" style="cursor: pointer;">
                            Entry Date @RenderSortIcon(nameof(TransactionDto.CREATED_ON))
                        </th>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.TRANSACTION_EFF_DATE))" style="cursor: pointer;">
                            Effective Date @RenderSortIcon(nameof(TransactionDto.TRANSACTION_EFF_DATE))
                        </th>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.TRANSACTION_EXPIRY_DATE))" style="cursor: pointer;">
                            Expiry Date @RenderSortIcon(nameof(TransactionDto.TRANSACTION_EXPIRY_DATE))
                        </th>
                        <th @onclick="() => SortTransactions(nameof(TransactionDto.CREATED_BY))" style="cursor: pointer;">
                            User @RenderSortIcon(nameof(TransactionDto.CREATED_BY))
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (PagedTransactions.Any())
                    {
                        @foreach (var transaction in PagedTransactions)
                        {
                            <tr>
                                <td>
                                    <a href="#" @onclick="@(e => ShowPolicyDetails(transaction))" @onclick:preventDefault="true">
                                        @transaction.POLICY_NO
                                    </a>
                                </td>
                                <td>@transaction.TRANSACTION_TYPE</td>
                                <td>@transaction.CREATED_ON?.ToShortDateString()</td>
                                <td>@transaction.TRANSACTION_EFF_DATE.ToShortDateString()</td>
                                <td>@transaction.TRANSACTION_EXPIRY_DATE?.ToShortDateString()</td>
                                <td>@transaction.CREATED_BY</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No transactions found.</td>
                        </tr>
                    }
                </tbody>
            </table>


            <!-- Pagination Controls -->
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
                <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
            </div>
        </div>
    </div>
</div>

@if (ShowPolicyModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Policy Details</h5>
                    <button type="button" class="btn-close" @onclick="ClosePolicyModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Policy #:</strong> @SelectedPolicy?.POLICY_NO</p>
                    <p><strong>Transaction Type:</strong> @SelectedPolicy?.TRANSACTION_TYPE</p>
                    <p><strong>Entry Date:</strong> @SelectedPolicy?.CREATED_ON?.ToShortDateString()</p>
                    <p><strong>Effective Date:</strong> @SelectedPolicy?.TRANSACTION_EFF_DATE.ToShortDateString()</p>
                    <p><strong>Expiry Date:</strong> @SelectedPolicy?.TRANSACTION_EXPIRY_DATE?.ToShortDateString()</p>
                    <p><strong>User:</strong> @SelectedPolicy?.CREATED_BY</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="OpenPolicy">Open Policy</button>
                    <button class="btn btn-secondary" @onclick="ClosePolicyModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string AccountNumber { get; set; }

    private string AccountName;
    private string AccountAddress;
    private string BillingAddress;
    private string PaymentMethod;
    private int CancelledPolicyCount;
    private string BillType;
    private string BillTo;
    private string OutputDeliveryMethod;
    private int DueDay;

    private void SetTab(string tab) => ActiveTab = tab;
    private void SetTabAccount() => SetTab("Account");
    private void SetTabBalances() => SetTab("Balances");
    private void SetTabHoldSuspend() => SetTab("HoldSuspend");
    private void SetTabEntityRoles() => SetTab("EntityRoles");
    private string ActiveTab = "Account";

    private DateTime FromDate = DateTime.Now.AddYears(-5); // Default to 6 months ago
    private DateTime ToDate = DateTime.Now; // Default to today

    private int CurrentPage = 1;
    private int PageSize = 50;

    private bool CanGoToPreviousPage => CurrentPage > 1;
    private bool CanGoToNextPage => (CurrentPage * PageSize) < Transactions.Count;

    private string SortColumn = nameof(TransactionDto.CREATED_ON); // Default sort column
    private bool SortAscending = true; // Default sort order

    private List<TransactionDto> Transactions = new();

    private bool ShowPolicyModal = false;
    private TransactionDto? SelectedPolicy;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountDetails();
    }

    private async Task LoadAccountDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");

            // Fetch account details
            var accountDetails = await client.GetFromJsonAsync<AccountDetailsDto>($"api/EntityRegister/details/dashboard/{AccountNumber}");

            if (accountDetails != null)
            {
                AccountName = !string.IsNullOrWhiteSpace(accountDetails.DOING_BUSINESS_AS_NAME)
                    ? accountDetails.DOING_BUSINESS_AS_NAME
                    : accountDetails.FULL_NAME;

                // Fetch addresses using SOURCE_SYSTEM_ENTITY_CODE
                var addresses = await client.GetFromJsonAsync<List<ENTITY_ADDRESS_INFO>>($"api/EntityAddress/addresses/{AccountNumber}");

                if (addresses != null && addresses.Any())
                {
                    // Assign physical address
                    var physicalAddress = addresses.FirstOrDefault(a => a.ADDRESS_TYPE == "PHYSICAL");
                    if (physicalAddress != null)
                    {
                        AccountAddress = $"{physicalAddress.ADDRESS1} {physicalAddress.ADDRESS2}, {physicalAddress.CITY}, {physicalAddress.STATE} {physicalAddress.ZIP_CODE}";
                    }

                    // Assign mailing address
                    var mailingAddress = addresses.FirstOrDefault(a => a.ADDRESS_TYPE == "MAILING");
                    if (mailingAddress != null)
                    {
                        BillingAddress = $"{mailingAddress.ADDRESS1} {mailingAddress.ADDRESS2}, {mailingAddress.CITY}, {mailingAddress.STATE} {mailingAddress.ZIP_CODE}";
                    }
                }

                PaymentMethod = "Check"; // Placeholder, update if needed
                CancelledPolicyCount = 0; // Placeholder, update if needed
                BillType = "Account Bill"; // Placeholder, update if needed
                BillTo = accountDetails.FULL_NAME;
                OutputDeliveryMethod = "Mail"; // Placeholder, update if needed
                DueDay = 1; // Placeholder, update if needed

                LoadTransactions();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading account details: {ex.Message}");
        }
    }

    private async Task LoadTransactions()
    {
        try
        {

            CurrentPage = 1;

            var client = HttpClientFactory.CreateClient("BillingDataApi");

            // Fetch transactions using SOURCE_SYSTEM_ENTITY_CODE and date range
            Transactions = await client.GetFromJsonAsync<List<TransactionDto>>(
                $"api/Transactions/byaccountnumber/{AccountNumber}?fromDate={FromDate:yyyy-MM-dd}&toDate={ToDate:yyyy-MM-dd}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
        }
    }

    private void SortTransactions(string column)
    {
        if (SortColumn == column)
        {
            // Toggle sort order if the same column is clicked
            SortAscending = !SortAscending;
        }
        else
        {
            // Set new column and default to ascending order
            SortColumn = column;
            SortAscending = true;
        }
    }

    private List<TransactionDto> PagedTransactions => Transactions
        .OrderByDynamic(SortColumn, SortAscending)
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    private RenderFragment RenderSortIcon(string column) => builder =>
    {
        if (SortColumn == column)
        {
            var icon = SortAscending ? "▲" : "▼"; // Up or down arrow
            builder.AddContent(0, icon);
        }
    };

    private void ShowPolicyDetails(TransactionDto transaction)
    {
        SelectedPolicy = transaction;
        ShowPolicyModal = true;
    }

    private void ClosePolicyModal()
    {
        ShowPolicyModal = false;
        SelectedPolicy = null;
    }

    private void OpenPolicy()
    {
        if (SelectedPolicy?.POLICY_NO != null)
        {
            NavigationManager.NavigateTo($"/policy-details/{SelectedPolicy.POLICY_NO}?accountNumber={AccountNumber}");
        }
        ShowPolicyModal = false;
    }

}
