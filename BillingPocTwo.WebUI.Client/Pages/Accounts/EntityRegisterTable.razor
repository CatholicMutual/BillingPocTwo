@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<h3>Entity Register</h3>

@if (entityRegisters == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>System Entity Code</th>
                <th>Entity Type</th>
                <th>Source System Entity Code</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in entityRegisters)
            {
                <tr>
                    <td>@item.SYSTEM_ENTITY_CODE</td>
                    <td>@item.ENTITY_TYPE</td>
                    <td>@item.SOURCE_SYSTEM_ENTITY_CODE</td>
                    <td>@item.BALANCE</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

@code {
    private List<ENTITY_REGISTER> entityRegisters;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var client = HttpClientFactory.CreateClient("BillingDataApi");
        var response = await client.GetFromJsonAsync<PaginatedResponse<ENTITY_REGISTER>>($"api/EntityRegister/paged?page={currentPage}&pageSize={pageSize}");
        if (response != null)
        {
            entityRegisters = response.Items;
            totalPages = response.TotalPages;
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadData();
        }
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    public class PaginatedResponse<T>
    {
        public List<T> Items { get; set; }
        public int TotalPages { get; set; }
    }
}
