@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory

<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);" @attributes="AdditionalAttributes">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Dashboard - Account #@AccountDetails?.SOURCE_SYSTEM_ENTITY_CODE</h5>
                <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (IsLoading)
                {
                    <p>Loading...</p>
                }
                else if (AccountDetails != null)
                {
                    <div class="row">
                        <div class="col-md-4">
                            <h6>Customer Profile</h6>
                            <p><strong>Name:</strong> @AccountDetails.FULL_NAME</p>
                            <p><strong>Address:</strong> @AccountDetails.ADDRESS1<br /> @AccountDetails.ADDRESS2<br /> @AccountDetails.CITY, @AccountDetails.STATE</p>
                            @* <p><strong>Elite Status:</strong> @EliteStatus</p> *@
                        </div>
                        <div class="col-md-4">
                            <h6>Last Invoice</h6>
                            <p><strong>Invoice Date:</strong> @(LastInvoice?.LastInvoiceDate?.ToString("MM/dd/yyyy") ?? "N/A")</p>
                            <p><strong>Invoice Due Date:</strong> @(LastInvoice?.LastInvoiceDueDate?.ToString("MM/dd/yyyy") ?? "N/A")</p>
                            <p><strong>Invoice Amount:</strong> @LastInvoice?.LastInvoiceAmount.ToString("C")</p>
                        </div>
                        <div class="col-md-4">
                            <h6>Next Invoice</h6>
                            <p><strong>Invoice Date:</strong> @(NextInvoice?.NextInvoiceDate?.ToString("MM/dd/yyyy") ?? "N/A")</p>
                            <p><strong>Invoice Due Date:</strong> @(NextInvoice?.NextInvoiceDueDate?.ToString("MM/dd/yyyy") ?? "N/A")</p>
                            <p><strong>Invoice Amount:</strong> @NextInvoice?.NextInvoiceAmount.ToString("C")</p>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <h6>Account Information</h6>
                            <p><strong>Past Due:</strong> @(AccountInfo?.PAST_DUE_AMT?.ToString("C") ?? "N/A")</p>
                            <p><strong>Current Due:</strong> @(AccountInfo?.CURRENT_MIN_AMT?.ToString("C") ?? "N/A")</p>
                            <p><strong>Account Balance:</strong> @(AccountInfo?.BALANCE?.ToString("C") ?? "N/A")</p>
                            @* <p><strong>Account Under Watch:</strong> @AccountUnderWatch</p> *@
                        </div>
                        <div class="col-md-6">
                            <h6>Notes</h6>
                            @* <p><strong>Date:</strong> @NoteDate</p>
                            <p><strong>By:</strong> @NoteBy</p>
                            <p><strong>Note:</strong> @NoteText</p> *@
                        </div>
                    </div>
                }
                else
                {
                    <p class="text-danger">Failed to load account details.</p>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button class="btn btn-primary" @onclick="NavigateToAccountView">View Account</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter] public string AccountNumber { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private AccountDetailsDto? AccountDetails;
    private LastInvoiceDto? LastInvoice;
    private NextInvoiceDto? NextInvoice;
    private AccountInfoDto? AccountInfo;
    private bool IsLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(AccountNumber))
        {
            IsLoading = true;

            // Fetch all data in parallel
            var tasks = new List<Task>
            {
                LoadAccountDetails(),
                LoadLastInvoiceDetails(),
                LoadNextInvoiceDetails(),
                LoadAccountInfoDetails()
            };

            await Task.WhenAll(tasks);

            IsLoading = false;
        }
    }

    private async Task LoadAccountDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            AccountDetails = await client.GetFromJsonAsync<AccountDetailsDto>($"api/EntityRegister/details/{AccountNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading account details: {ex.Message}");
        }
    }

    private async Task LoadLastInvoiceDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            LastInvoice = await client.GetFromJsonAsync<LastInvoiceDto>($"api/EntityRegister/last-invoice/{AccountNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading last invoice details: {ex.Message}");
        }
    }

    private async Task LoadNextInvoiceDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            NextInvoice = await client.GetFromJsonAsync<NextInvoiceDto>($"api/EntityRegister/next-invoice/{AccountNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading next invoice details: {ex.Message}");
        }
    }

    private async Task LoadAccountInfoDetails()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BillingDataApi");
            AccountInfo = await client.GetFromJsonAsync<AccountInfoDto>($"api/EntityRegister/acct-info/{AccountNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading next invoice details: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        OnClose.InvokeAsync();
    }

    private void NavigateToAccountView()
    {
        Navigation.NavigateTo($"/account-view/{AccountNumber}");
    }
}
