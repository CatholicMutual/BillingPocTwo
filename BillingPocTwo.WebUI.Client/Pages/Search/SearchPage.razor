@page "/search"
@using BillingPocTwo.Shared.DataObjects.Billing

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<h3>Search</h3>

<div class="form-group">
    <label for="searchTerm">Account Number:</label>
    <input type="text" id="searchTerm" class="form-control" @bind="SearchTerm" @oninput="OnSearchTermChanged" placeholder="Ex: 0084-0000" />
</div>

<button class="btn btn-primary" @onclick="PerformSearch">Search</button>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (SearchResults != null && SearchResults.Any())
{
    <div class="panel panel-default mt-4">
        <div class="panel-heading">
            <h4>Search Results</h4>
        </div>
        <div class="panel-body">
            <ul>
                @foreach (var result in SearchResults)
                {
                    <li>
                        <button class="btn btn-link" @onclick="() => OpenModal(result)">
                            @result.FULL_NAME (@result.SOURCE_SYSTEM_ENTITY_CODE)
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@if (ShowModal && SelectedAccount != null)
{
    <DashboardModal AccountNumber="@SelectedAccount.SOURCE_SYSTEM_ENTITY_CODE" OnClose="CloseModal" class="@DashboardModalClass" />
}

@code {
    private string SearchTerm = string.Empty;
    private bool IsLoading = false;
    private List<EntityDetailsDto>? SearchResults = null;
    private string? ErrorMessage = null;

    private bool ShowModal = false;
    private EntityDetailsDto? SelectedAccount = null;

    private string DashboardModalClass => ShowModal ? "dashboard-modal-overlay d-block" : "dashboard-modal-overlay d-none";

    private async Task PerformSearch()
    {
        IsLoading = true;
        ErrorMessage = null;
        SearchResults = null;

        var client = HttpClientFactory.CreateClient("BillingDataApi");

        try
        {
            if (IsAccountNumber(SearchTerm))
            {
                // Search by account number
                var result = await client.GetFromJsonAsync<EntityDetailsDto>($"api/EntityRegister/details/{SearchTerm}");
                if (result != null)
                {
                    SearchResults = new List<EntityDetailsDto> { result };
                }
            }
            else if (IsPolicyNumber(SearchTerm))
            {
                // Search by policy number
                var result = await client.GetFromJsonAsync<EntityDetailsDto>($"api/EntityRegister/details/policy/{SearchTerm}");
                if (result != null)
                {
                    SearchResults = new List<EntityDetailsDto> { result };
                }
            }
            else
            {
                // Assume it's a name search
                SearchResults = await client.GetFromJsonAsync<List<EntityDetailsDto>>($"api/EntityRegister/details/name/{SearchTerm}");
                if (SearchResults == null || !SearchResults.Any())
                {
                    ErrorMessage = "No results found for the provided name.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        IsLoading = false;
    }

    private bool IsAccountNumber(string input)
    {
        // Validate the format XXXX-XXX or XXXX-XXXX where the last digit can be a character
        return System.Text.RegularExpressions.Regex.IsMatch(input, @"^\d{4}-\w{3,4}$");
    }

    private bool IsPolicyNumber(string input)
    {
        // Example: Policy numbers may have a specific alphanumeric format
        return input.StartsWith("POL") && input.Length > 3; // Adjust logic as needed
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        // Clear EntityDetails when the search term changes
        if (e.Value is string newValue && newValue != SearchTerm)
        {
            SearchResults = null;
        }
    }

    private void OpenModal(EntityDetailsDto account)
    {
        SelectedAccount = account;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedAccount = null;
    }
}
