@page "/search"

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<h3>Search</h3>

<div class="form-group">
    <label for="searchTerm">Account Number:</label>
    <input type="text" id="searchTerm" class="form-control" @bind="SearchTerm" @oninput="OnSearchTermChanged" placeholder="Ex: 0084-0000" />
</div>

<button class="btn btn-primary" @onclick="PerformSearch">Search</button>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (EntityDetails != null)
{
    <div class="panel panel-default mt-4">
        <div class="panel-heading">
            <h4>Entity Details</h4>
        </div>
        <div class="panel-body">
            <p><strong>SYSTEM ENTITY CODE:</strong> @EntityDetails.SYSTEM_ENTITY_CODE</p>
            <p><strong>FULL NAME:</strong> @EntityDetails.FULL_NAME</p>
            <p><strong>CITY:</strong> @EntityDetails.CITY</p>
            <p><strong>STATE:</strong> @EntityDetails.STATE</p>
            <p><strong>POLICY IDs:</strong></p>
            <ul>
                @foreach (var policyTermId in EntityDetails.PolicyTermIds)
                {
                    <li>
                        <a href="javascript:void(0)" @onclick="() => ShowPolicyDetails(policyTermId, SearchTerm)">@policyTermId</a>
                    </li>
                }
            </ul>
        </div>
    </div>

    <Modal IsVisible="@IsModalVisible" OnClose="CloseModal">
        @if (SelectedPolicy != null)
        {
            <div>
                <h5>Policy Details</h5>
                <p><strong>Policy Number:</strong> @SelectedPolicy.POLICY_NO</p>
                <p><strong>Effective Date:</strong> @SelectedPolicy.POLICY_EFFECTIVE_DATE</p>
                <p><strong>Expiration Date:</strong> @SelectedPolicy.POLICY_EXPIRATION_DATE</p>
                <p><strong>Balance:</strong> @SelectedPolicy.BALANCE</p>
            </div>
        }
        else
        {
            <p>Loading policy details...</p>
        }
    </Modal>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    private string SearchTerm = string.Empty;
    private bool IsLoading = false;
    private EntityDetailsDto? EntityDetails = null;
    private string? ErrorMessage = null;
    private POLICY_REGISTER? SelectedPolicy = null;
    private bool IsModalVisible = false;


    private async Task PerformSearch()
    {
        IsLoading = true;
        ErrorMessage = null;
        EntityDetails = null;

        var client = HttpClientFactory.CreateClient("BillingDataApi");

        try
        {
            EntityDetails = await client.GetFromJsonAsync<EntityDetailsDto>($"api/EntityRegister/details/{SearchTerm}");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        IsLoading = false;
    }

    private async Task ShowPolicyDetails(decimal policyTermId, string sourceSystemEntityCode)
    {
        SelectedPolicy = null;
        IsModalVisible = true;

        var client = HttpClientFactory.CreateClient("BillingDataApi");

        try
        {
            SelectedPolicy = await client.GetFromJsonAsync<POLICY_REGISTER>($"api/Policy/details/{sourceSystemEntityCode}/{policyTermId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        // Clear EntityDetails when the search term changes
        if (e.Value is string newValue && newValue != SearchTerm)
        {
            EntityDetails = null;
        }
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }
}
