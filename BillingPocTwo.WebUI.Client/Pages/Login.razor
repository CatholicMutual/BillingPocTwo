@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
</EditForm>

<p><em>@message</em></p>

@code {
    private LoginDto loginModel = new LoginDto();
    private string message = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponseDto>();
            if (tokenResponse != null)
            {
                await LocalStorage.SetItemAsync("authToken", tokenResponse.AccessToken);
                var claims = JwtParser.ParseClaimsFromJwt(tokenResponse.AccessToken);
                var changePasswordClaim = claims.FirstOrDefault(c => c.Type == "ChangePasswordOnFirstLogin")?.Value;

                if (bool.TryParse(changePasswordClaim, out bool changePasswordOnFirstLogin) && changePasswordOnFirstLogin)
                {
                    Navigation.NavigateTo("/change-password");
                }
                else
                {
                    ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(tokenResponse.AccessToken);
                    Navigation.NavigateTo("/welcome2");
                }
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            message = $"{errorResponse}";
        }
        isLoading = false;
    }
}
