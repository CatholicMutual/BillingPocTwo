@page "/login"

@inject IHttpClientFactory HttpClientFactory
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject UserState UserState

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(message))
{
    <em>@message</em>
}

@code {
    public LoginDto loginModel = new LoginDto();
    public string message = string.Empty;
    public bool isLoading = false;

    // Change the access modifier to internal or public
    public async Task HandleLogin()
    {
        isLoading = true;
        message = null;

        // Use the named HttpClient
        var client = HttpClientFactory.CreateClient("AuthApi");
        var response = await client.PostAsJsonAsync("api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponseDto>();

            if (string.IsNullOrWhiteSpace(tokenResponse?.AccessToken))
            {
                throw new InvalidOperationException("Access token is null or empty.");
            }

            if (tokenResponse != null)
            {
                await SessionStorage.SetItemAsync("AccessToken", tokenResponse.AccessToken);
                var claims = JwtParser.ParseClaimsFromJwt(tokenResponse.AccessToken);

                // Update UserState directly
                UserState.IsAuthenticated = true;
                UserState.Email = claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
                UserState.FirstName = claims.FirstOrDefault(c => c.Type == "FirstName")?.Value;
                UserState.LastName = claims.FirstOrDefault(c => c.Type == "LastName")?.Value;
                UserState.IsAdmin = claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");

                // Notify AuthenticationStateProvider
                ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(tokenResponse.AccessToken);
                StateHasChanged();

                var changePasswordClaim = claims.FirstOrDefault(c => c.Type == "ChangePasswordOnFirstLogin")?.Value;

                if (bool.TryParse(changePasswordClaim, out bool changePasswordOnFirstLogin) && changePasswordOnFirstLogin)
                {
                    Navigation.NavigateTo("/change-password");
                }
                else
                {
                    Navigation.NavigateTo("/welcome2");
                }
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            message = errorResponse;
            StateHasChanged();
        }
        isLoading = false;
    }
}
